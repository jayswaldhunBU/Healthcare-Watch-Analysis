{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"5f7rIpI_gvt9","executionInfo":{"status":"ok","timestamp":1669127268614,"user_tz":300,"elapsed":1145,"user":{"displayName":"Rahul Razdan","userId":"13758383662585446533"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import math\n","import matplotlib.pyplot as plt  # To visualize\n","from sklearn.linear_model import LinearRegression\n","from sklearn import datasets, linear_model"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0l3l9as1g4zp","executionInfo":{"status":"ok","timestamp":1669127295021,"user_tz":300,"elapsed":20882,"user":{"displayName":"Rahul Razdan","userId":"13758383662585446533"}},"outputId":"c72db5dd-64df-456f-cbd5-3d3a37a9e075"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["DEMOGRAPHIC_DIR = \"/content/gdrive/Shareddrives/CS 506 Project (Work from Home)/Data/Non-Hypothesis Data/demographic.csv\"\n","demographic_csv = pd.read_csv(DEMOGRAPHIC_DIR)"],"metadata":{"id":"tQWbsYSZhKkm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["DAILY_AM_DIR = \"/content/gdrive/Shareddrives/CS 506 Project (Work from Home)/DATA - Working From the Home Environment /3 Month Data/Daily AM/7103000 (1).csv\"\n","daily_am_csv = pd.read_csv(DAILY_AM_DIR)"],"metadata":{"id":"oT-Si0qNiWqn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["FRIDAY_AM_DIR = \"/content/gdrive/Shareddrives/CS 506 Project (Work from Home)/DATA - Working From the Home Environment /3 Month Data/Friday AM/7105000 (1).csv\"\n","friday_am_csv = pd.read_csv(FRIDAY_AM_DIR)"],"metadata":{"id":"bH8ohWHzkLmQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["DAILY_END_DIR = \"/content/gdrive/Shareddrives/CS 506 Project (Work from Home)/DATA - Working From the Home Environment /3 Month Data/Daily END/7108000 (1).csv\"\n","daily_end_csv = pd.read_csv(DAILY_END_DIR)"],"metadata":{"id":"CaLjk94Tw043"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["state_dict = {}\n","industry_dict = {}\n","state_code = 0\n","industry_code = 0\n","demographic_csv[['state_code', 'industry_code']] = None\n","for index, row in demographic_csv.iterrows():\n","  if row[1] not in state_dict:\n","    state_dict[row[1]] = state_code\n","    state_code += 1\n","  if row[3] not in industry_dict:\n","    industry_dict[row[3]] = industry_code\n","    industry_code += 1\n","\n","def demo_csv_func(row):\n","  row[4] = state_dict[row[1]]\n","  row[5] = industry_dict[row[3]]\n","  return row\n","\n","new_demo_csv = demographic_csv.apply(demo_csv_func, axis = 1)\n","new_demo_csv = new_demo_csv.drop(columns = ['State', 'Industry'])\n","new_demo_csv.head()\n","   "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"M48SNO31xORa","executionInfo":{"status":"ok","timestamp":1667326007071,"user_tz":240,"elapsed":13,"user":{"displayName":"Rahul Razdan","userId":"13758383662585446533"}},"outputId":"0b1ae5b3-593a-4944-96e2-bb99157381d6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Mobile ID  Age   state_code  industry_code\n","0   82420964    33           0              0\n","1   56954906    46           1              1\n","2   27361835    33           2              2\n","3   63406467    27           3              3\n","4   70975009    40           0              4"],"text/html":["\n","  <div id=\"df-6fff5cb4-0e25-431e-b0a2-3b1beb1c9dc7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Mobile ID</th>\n","      <th>Age</th>\n","      <th>state_code</th>\n","      <th>industry_code</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>82420964</td>\n","      <td>33</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>56954906</td>\n","      <td>46</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>27361835</td>\n","      <td>33</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>63406467</td>\n","      <td>27</td>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>70975009</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6fff5cb4-0e25-431e-b0a2-3b1beb1c9dc7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6fff5cb4-0e25-431e-b0a2-3b1beb1c9dc7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6fff5cb4-0e25-431e-b0a2-3b1beb1c9dc7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["daily_am_csv.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"fraz6lEk0qKk","executionInfo":{"status":"ok","timestamp":1667326007071,"user_tz":240,"elapsed":11,"user":{"displayName":"Rahul Razdan","userId":"13758383662585446533"}},"outputId":"8b3d9f2d-aaaa-4bb4-b650-e763ed61f917"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    mbl_cod  rsp_id          ts           local_time  DISCOMFORT_SLIDER  \\\n","0  11822993   32680  1652109916  2022-05-09 10:25:16                1.0   \n","1  11822993   32680  1652198289  2022-05-10 10:58:09                1.0   \n","2  11822993   32680  1652280438  2022-05-11 09:47:18                1.0   \n","3  11822993   32680  1652370396  2022-05-12 10:46:36                1.0   \n","4  11822993   32680  1652712594  2022-05-16 09:49:54                1.0   \n","\n","   LOCATION_AM  STRESS  PULSE_OX  HEART_RATE  RESPIRATION  BODY_BATTERY  \\\n","0          2.0     0.0       0.0         0.0          0.0           0.0   \n","1          2.0     0.0       0.0        94.0          0.0           0.0   \n","2          2.0     0.0       0.0         0.0          0.0           0.0   \n","3          2.0     0.0       0.0         0.0          0.0           0.0   \n","4          2.0     0.0       0.0         0.0          0.0           0.0   \n","\n","   STEPS  CALORIES  FLOORS  INTENSITY_MINUTES  LONGITUDE   LATITUDE  AVG_AMP  \\\n","0      0         0       0                  0  39.039722 -94.244036      0.0   \n","1      0         0       0                  0  39.039705 -94.244087      0.0   \n","2      0         0       0                  0   0.000000   0.000000      0.0   \n","3      0         0       0                  0   0.000000   0.000000      0.0   \n","4      0         0       0                  0   0.000000   0.000000      0.0   \n","\n","   VOX_ACTV  \n","0       0.0  \n","1       0.0  \n","2       0.0  \n","3       0.0  \n","4       0.0  "],"text/html":["\n","  <div id=\"df-a65f014f-f5b6-4f78-b43a-a3e902196ec9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mbl_cod</th>\n","      <th>rsp_id</th>\n","      <th>ts</th>\n","      <th>local_time</th>\n","      <th>DISCOMFORT_SLIDER</th>\n","      <th>LOCATION_AM</th>\n","      <th>STRESS</th>\n","      <th>PULSE_OX</th>\n","      <th>HEART_RATE</th>\n","      <th>RESPIRATION</th>\n","      <th>BODY_BATTERY</th>\n","      <th>STEPS</th>\n","      <th>CALORIES</th>\n","      <th>FLOORS</th>\n","      <th>INTENSITY_MINUTES</th>\n","      <th>LONGITUDE</th>\n","      <th>LATITUDE</th>\n","      <th>AVG_AMP</th>\n","      <th>VOX_ACTV</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>11822993</td>\n","      <td>32680</td>\n","      <td>1652109916</td>\n","      <td>2022-05-09 10:25:16</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>39.039722</td>\n","      <td>-94.244036</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>11822993</td>\n","      <td>32680</td>\n","      <td>1652198289</td>\n","      <td>2022-05-10 10:58:09</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>94.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>39.039705</td>\n","      <td>-94.244087</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>11822993</td>\n","      <td>32680</td>\n","      <td>1652280438</td>\n","      <td>2022-05-11 09:47:18</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11822993</td>\n","      <td>32680</td>\n","      <td>1652370396</td>\n","      <td>2022-05-12 10:46:36</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>11822993</td>\n","      <td>32680</td>\n","      <td>1652712594</td>\n","      <td>2022-05-16 09:49:54</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a65f014f-f5b6-4f78-b43a-a3e902196ec9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a65f014f-f5b6-4f78-b43a-a3e902196ec9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a65f014f-f5b6-4f78-b43a-a3e902196ec9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["daily_end_csv_needed = daily_end_csv[['mbl_cod', 'local_time', 'DAILY_BREAKS', 'LOCATION_END']]\n","daily_am_csv_needed = daily_am_csv[['mbl_cod', 'local_time', 'DISCOMFORT_SLIDER', 'LOCATION_AM']]"],"metadata":{"id":"kHCBKfJc0t61"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def split_date_time(DATA):\n","  DATA[[\"date\", \"exact_time\"]] = DATA[\"local_time\"].str.split(\" \", expand=True)\n","  DATA = DATA.drop(columns = ['local_time'])\n","  DATA[[\"Year\", \"Month\", \"Day\"]] = DATA[\"date\"].str.split(\"-\", expand=True)\n","  DATA = DATA.drop(columns = [\"date\"])\n","  return DATA\n","\n","final_am_csv = split_date_time(daily_am_csv_needed)\n","final_end_csv = split_date_time(daily_end_csv_needed)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8NvYLruO1zsh","executionInfo":{"status":"ok","timestamp":1667326007297,"user_tz":240,"elapsed":5,"user":{"displayName":"Rahul Razdan","userId":"13758383662585446533"}},"outputId":"e2f5ba2a-bc11-43fd-e62e-c2c9b4f67b18"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:3641: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self[k1] = value[k2]\n"]}]},{"cell_type":"code","source":["merged_df = pd.merge(final_am_csv, final_end_csv, how = \"inner\", on = [\"mbl_cod\", \"Year\", \"Month\", \"Day\"])\n","merged_df = merged_df.drop(columns = [\"exact_time_x\", \"exact_time_y\"])"],"metadata":{"id":"zBKuELlt2bAL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import datetime as dt\n","\n","begin = dt.datetime(2022, 5, 1)\n","end = dt.datetime.now()\n","week_dict = {}\n","week_num = 0\n","while begin < end:\n","  curBeg = begin\n","  curEnd = begin + dt.timedelta(days = 7)\n","  begin = curEnd\n","  week_dict[curEnd] = week_num\n","  week_num += 1\n","merged_df['week_num'] = None\n","merged_df.head()\n","\n","def week_num(row):\n","  datetime = dt.datetime(int(row[3]), int(row[4]), int(row[5]))\n","  day_of_week = datetime.weekday()\n","  offset = 6 - day_of_week\n","  new_date = datetime + dt.timedelta(days = offset)\n","  row[8] = week_dict[new_date]\n","  return row\n","\n","merged_df_new = merged_df.apply(week_num, axis = 1)"],"metadata":{"id":"J-3sMW5Y3NAw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["friday_am_csv_needed = friday_am_csv[['mbl_cod', 'local_time', 'LIFE_SATISFACTION', 'HAPPINESS', 'PHYSICAL_HEALTH', 'MENTAL_HEALTH', 'WORTHWHILE', 'PURPOSE', 'PROMOTE_GOOD', 'DELAYED_HAPPINESS', 'CONTENT_RELATIONSHIPS', 'LIVING_EXPENSES', 'FOOD_HOUSING']]\n"],"metadata":{"id":"-_Yfozey3ROA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["final_csv_friday = split_date_time(friday_am_csv_needed)\n","final_csv_friday['week_num'] = None"],"metadata":{"id":"b0QXqHMKBd9Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def week_num(row):\n","  datetime = dt.datetime(int(row[-4]), int(row[-3]), int(row[-2]))\n","  day_of_week = datetime.weekday()\n","  offset = 6 - day_of_week\n","  new_date = datetime + dt.timedelta(days = offset)\n","  row[-1] = week_dict[new_date]\n","  return row\n","\n","final_csv_friday_new = final_csv_friday.apply(week_num, axis = 1)"],"metadata":{"id":"xdzpLP9uC7L2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["merged_df_dropped = merged_df_new.drop(columns = ['Year', 'Month', 'Day'])\n","final_friday = final_csv_friday_new.drop(columns = ['Year', 'Month', 'Day'])\n","final = pd.merge(merged_df_dropped, final_friday, on= [\"mbl_cod\", \"week_num\"])\n","final_merged = pd.merge(new_demo_csv, final, left_on = \"Mobile ID\", right_on = \"mbl_cod\")\n","final = final_merged.drop(columns = ['Mobile ID', 'exact_time'])"],"metadata":{"id":"CFKgTTElDq5y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["grouped = final.groupby(['mbl_cod', 'week_num']).mean()\n","grouped= grouped.reset_index()\n","grouped = grouped.dropna()\n","grouped = grouped.drop(columns = ['mbl_cod', 'week_num'])"],"metadata":{"id":"J3o1dohdGTZy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = grouped.drop(columns = ['LIFE_SATISFACTION']).to_numpy()\n","y = grouped['LIFE_SATISFACTION'].to_numpy()"],"metadata":{"id":"-gVjlFi6IXcw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.2, random_state=0)"],"metadata":{"id":"dpQfbaQLYAg-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import confusion_matrix\n","from sklearn.model_selection import train_test_split\n","import seaborn as sns\n","\n","knn = KNeighborsClassifier()\n","knn.fit(X_train, Y_train)\n","pred = knn.predict(X_test)\n","\n","sns.heatmap(confusion_matrix(Y_test, pred), annot = True)\n","plt.title(\"Confusion matrix for KNN Classifier\")\n","plt.xlabel('Predicted')\n","plt.ylabel('True')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"uwtDwZHqN40m","executionInfo":{"status":"ok","timestamp":1667326757165,"user_tz":240,"elapsed":1643,"user":{"displayName":"Rahul Razdan","userId":"13758383662585446533"}},"outputId":"f5674f01-4a7e-448c-eb54-044fb72be2b9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier as rfc\n","\n","RFC = rfc(1)\n","RFC.fit(X_train, Y_train)\n","pred = RFC.predict(X_test)\n","\n","sns.heatmap(confusion_matrix(Y_test, pred), annot = True)\n","plt.title(\"Confusion matrix for Random Forest Classifier\")\n","plt.xlabel('Predicted')\n","plt.ylabel('True')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"4708ISNeOw20","executionInfo":{"status":"ok","timestamp":1667326777805,"user_tz":240,"elapsed":657,"user":{"displayName":"Rahul Razdan","userId":"13758383662585446533"}},"outputId":"e4b254c9-8bf0-459e-d009-9c82df583d2a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[],"metadata":{"id":"mqbQ2x9MO5Fe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"bdruqftpRJv2"},"execution_count":null,"outputs":[]}]}